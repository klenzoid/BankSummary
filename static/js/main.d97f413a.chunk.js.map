{"version":3,"sources":["services/loadFile.js","services/sortTransactions.js","services/uniqueDates.js","components/SideBar.js","components/MainContent.js","services/getForDate.js","App.js","services/sumTransactions.js","serviceWorker.js","index.js"],"names":["loadFile","file","sortedTransactions","Papa","complete","result","data","datedTransactions","uniqueDates","rawData","i","l","length","dataPoint","moment","format","dataPointInfo","slice","push","sortTransactions","convertedData","unique","SideBar","viewDate","selectDate","totalData","Object","entries","map","date","amount","className","onClick","e","target","value","handleOnclick","key","style","whiteSpace","color","MainContent","dayTotal","selectedDate","transactions","toString","getForDate","dated","desc","location","backgroundColor","App","useState","isFileLoaded","setIsFileLoaded","setFile","setSelectedDate","allInfo","setAllInfo","useEffect","type","name","accept","onChange","preventDefault","loadedFile","files","count","allTransactions","allDaysTransactions","daySum","transactionDate","parseFloat","toFixed","sumTransactions","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d97f413a.chunk.js","sourcesContent":["// DESCRIPTION: turn CSV into JSON\r\n//  CSV to JSON with papaparse\r\n\r\n// INPUTS\r\n// takes in CSV file with no headers\r\n// CSV has columns of date, $ amount, null, action, location\r\n\r\n// OUTPUTS\r\n// outputs object with an array of arrays\r\n//{data: [[transaction]]}\r\n\r\nimport * as Papa from \"papaparse\";\r\nimport { uniqueDates } from \"./uniqueDates\";\r\nimport { sortTransactions } from \"./sortTransactions\";\r\nexport function loadFile(file) {\r\n  var sortedTransactions = {};\r\n  Papa.parse(file, {\r\n    complete: function(result) {\r\n      sortedTransactions.data = result.data;\r\n      var listOfUniqueDates = uniqueDates(sortedTransactions.data);\r\n      var datedTransactions = sortTransactions(listOfUniqueDates, result.data);\r\n      sortedTransactions.data = datedTransactions;\r\n    }\r\n  });\r\n  return sortedTransactions;\r\n}\r\n","// DESCRIPTION: gets all transactions in a single day\r\n\r\n// INPUTS\r\n// date -> selected date as a string\r\n// datedTransactions -> object with date:[transactions] as key:value pair\r\n\r\n// OUTPUTS\r\n// display the dated transactions for selected date\r\nimport moment from \"moment\";\r\nexport function sortTransactions(uniqueDates, rawData) {\r\n  var sortedTransactions = uniqueDates;\r\n  var data = rawData;\r\n  for (var i = 0, l = data.length - 1; i < l; i++) {\r\n    var dataPoint = moment(data[i][0]).format(\"MMMM Do YYYY\");\r\n    var dataPointInfo = data[i].slice(1);\r\n    if (dataPoint in uniqueDates) {\r\n      sortedTransactions[dataPoint].push(dataPointInfo);\r\n    }\r\n  }\r\n  return sortedTransactions;\r\n}\r\n","// DESCRIPTION: get unique dates from JSON\r\n\r\n// INPUTS\r\n// takes in array of arrays\r\n// each array in array has structure -> [date, $amount, null, description, location]\r\n// eg) [[transaction]]\r\n\r\n// OUTPUTS\r\n// returns object with date: emptyArray as key:value pair\r\n\r\nimport moment from \"moment\";\r\n\r\nexport function uniqueDates(convertedData) {\r\n  let data = convertedData;\r\n  var unique = {};\r\n  for (var i = 0, l = data.length; i < l; i++) {\r\n    var dataPoint = moment(data[i][0]).format(\"MMMM Do YYYY\");\r\n    if (dataPoint in unique === false && dataPoint !== \"Invalid date\") {\r\n      unique[dataPoint] = [];\r\n    }\r\n  }\r\n  return unique;\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nconst SideBar = ({ viewDate, selectDate, totalData }) => {\r\n  function handleOnclick(e) {\r\n    selectDate(e.target.value);\r\n  }\r\n  var datedTransactions = Object.entries(totalData).map(([date, amount]) => {\r\n    return (\r\n      <button\r\n        className={`sideBarContent`}\r\n        onClick={e => handleOnclick(e)}\r\n        value={date}\r\n        key={date}\r\n      >\r\n        {`${date}: ${amount}`}\r\n      </button>\r\n    );\r\n  });\r\n\r\n  var noWrap = {\r\n    whiteSpace: \"nowrap\",\r\n    color: \"white\"\r\n  };\r\n\r\n  var userPickDate = {\r\n    color: \"#fd8263\"\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2 style={noWrap}>\r\n        Viewing: <span style={userPickDate}>{viewDate}</span>\r\n      </h2>\r\n      {datedTransactions}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SideBar;\r\n","import React from \"react\";\r\nimport { getForDate } from \"../services/getForDate\";\r\n\r\nconst MainContent = ({ selectDate, datedTransactions, dayTotal }) => {\r\n  var selectedDate = getForDate(selectDate, datedTransactions);\r\n\r\n  function getDateTransactions(date) {\r\n    return date.map((dated, i) => {\r\n      var amount = dated[0];\r\n      var desc = dated[2];\r\n      var location = dated[3];\r\n      return (\r\n        <tr key={i}>\r\n          <td>${amount}</td>\r\n          <td>{desc}</td>\r\n          <td>{location}</td>\r\n        </tr>\r\n      );\r\n    });\r\n  }\r\n  return (\r\n    <div>\r\n      <table className=\"mainContentTable\">\r\n        <thead>\r\n          <tr>\r\n            <th>Amount</th>\r\n            <th>Description</th>\r\n            <th>Location</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {getDateTransactions(selectedDate)}\r\n          <td style={{ backgroundColor: \"#fd8263\" }}>\r\n            NET AMOUNT: ${dayTotal}\r\n          </td>\r\n          <td style={{ backgroundColor: \"#fd8263\" }}></td>\r\n          <td style={{ backgroundColor: \"#fd8263\" }}></td>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainContent;\r\n","export function getForDate(selectedDate, datedTransactions) {\r\n  for (let [date, transactions] of Object.entries(datedTransactions)) {\r\n    if (date.toString() === selectedDate.toString()) {\r\n      return transactions;\r\n    }\r\n  }\r\n}\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\n// Functions\nimport { loadFile } from \"./services/loadFile\";\nimport { sumTransactions } from \"./services/sumTransactions\";\n// Components\nimport SideBar from \"./components/SideBar\";\nimport MainContent from \"./components/MainContent\";\nfunction App() {\n  // States to load file into app\n\n  //Check if user uploaded file\n  const [isFileLoaded, setIsFileLoaded] = useState(false);\n\n  // user uploaded file, not processed yet\n  // raw file, should be csv\n  const [file, setFile] = useState(\"\");\n\n  const [selectedDate, setSelectedDate] = useState(null);\n\n  const [allInfo, setAllInfo] = useState({\n    dayTotal: null,\n    datedTransactions: null\n  });\n\n  useEffect(() => {\n    setAllInfo({ ...allInfo, datedTransactions: loadFile(file) });\n  }, [file]);\n\n  function onChange(e) {\n    e.preventDefault();\n    let loadedFile = e.target.files[0];\n    setFile(loadedFile);\n  }\n\n  function sorted(e) {\n    let count = sumTransactions(allInfo.datedTransactions.data);\n    setAllInfo({ ...allInfo, dayTotal: count });\n    setIsFileLoaded(true);\n  }\n\n  return (\n    <div className=\"App\">\n      <form className=\"inputFile\">\n        <input\n          type=\"file\"\n          name=\"file\"\n          accept=\".csv\"\n          onChange={onChange}\n        ></input>\n      </form>\n      <button className=\"inputFileSubmit\" onClick={sorted}>\n        Load File\n      </button>\n\n      <div className=\"sideBar\">\n        {isFileLoaded && (\n          <SideBar\n            viewDate={selectedDate}\n            selectDate={setSelectedDate}\n            totalData={allInfo.dayTotal}\n          />\n        )}\n      </div>\n\n      <div className=\"mainContent\">\n        {selectedDate && (\n          <MainContent\n            dayTotal={allInfo.dayTotal[selectedDate]}\n            selectDate={selectedDate}\n            datedTransactions={allInfo.datedTransactions.data}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// DESCRIPTION: calculate net transaction amount for a single day\r\n\r\n// INPUTS\r\n// takes in date: [[transaction]] in key:value pair\r\n\r\n// OUTPUTS\r\n// date: netTransactionAmount in key:value pair\r\n\r\nexport function sumTransactions(allTransactions) {\r\n  // return this\r\n  var allDaysTransactions = {};\r\n  // daysKeys -> output array of unique dates\r\n  for (var [date, transactions] of Object.entries(allTransactions)) {\r\n    var daySum = 0;\r\n    // const transactionDate = moment(date).format(\"MMMM Do YYYY\");\r\n    var transactionDate = date;\r\n    for (var i = 0, l = transactions.length; i < l; i++) {\r\n      var transactionAmount = parseFloat(transactions[i][0]);\r\n      daySum += transactionAmount;\r\n      allDaysTransactions[transactionDate] = daySum.toFixed(2);\r\n    }\r\n  }\r\n  return allDaysTransactions;\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}